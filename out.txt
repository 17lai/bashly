#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.root_command
root_command() {
  # :spec/tmp/src/root_command.sh
  echo "error: cannot load file"
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
get_usage() {
  if [[ -n $long_usage ]]; then
    printf "get\n"
    echo 
    printf "  get something from somewhere\n  this is the second line\n"
    echo 
  else
    printf "get - get something from somewhere\n"
    echo 
  fi

  printf "Shortcut: g\n"
  echo

  printf "Usage:\n"
  printf "  get SOURCE [TARGET] [options]\n"
  printf "  get --help | -h\n"
  printf "  get --version | -v\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --force (required)"
    printf "\n"
    echo
    
    # :flag.usage
    echo "  --verbose"
    printf "\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  SOURCE"
    printf "\n"
    echo
    
    # :argument.usage
    echo "  TARGET"
    printf "\n"
    echo
    # :command.usage_environment_variables
    printf "Environment Variables:\n"
    
    # :environment_variable.usage
    echo "  SECRET_KEY (required)"
    printf "\n"
    echo
    
    # :environment_variable.usage
    echo "  TARGET_FOLDER"
    printf "\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    get_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  if [[ -z "$SECRET_KEY" ]]; then
    printf "missing required environment variable: SECRET_KEY\n"
    exit 1
  fi
  # :command.dependencies_filter
  # :command.command_filter
  action="root"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    printf "missing required argument: SOURCE\nusage: get SOURCE [TARGET] [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  argstring="$*"
  if [[ "$argstring" != *--force* ]]; then
    printf "missing required flag: --force\n"
    exit 1
  fi
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --force )
      args[--force]=1
      shift
      ;;
  
    # :flag.case
    --verbose )
      args[--verbose]=1
      shift
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      elif [[ ! ${args[target]} ]]; then
        args[target]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
}

# :command.initialize
initialize() {
  version=""
  long_usage=''
  set -e  

  # :spec/tmp/src/initialize.sh
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    get_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
