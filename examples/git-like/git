#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
git_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "git - Git example"
    echo 
  else
    echo -e "git - Git example"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  git [command] [options]"
  echo -e "  git [command] --help | -h"
  echo -e "  git --version"
  echo
  # :command.usage_commands
  echo -e "Commands:"
  echo "  status   Show repository status"
  echo "  commit   Commit changes"
  echo

  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo

  fi
}

# :command.usage
git_status_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "git status - Show repository status"
    echo 
  else
    echo -e "git status - Show repository status"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  git status [options]"
  echo -e "  git status --help | -h"
  echo

  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo

  fi
}

# :command.usage
git_commit_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "git commit - Commit changes"
    echo 
  else
    echo -e "git commit - Commit changes"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  git commit [options]"
  echo -e "  git commit --help | -h"
  echo

  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --message, -m MESSAGE"
    echo -e "    Commit message"
    echo
    
    # :flag.usage
    echo "  --all, -a"
    echo -e "    Automatically stage files"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions
# :command.function
git_status_command() {
  # :src/status_command.sh
  echo "# this file is located in 'src/status_command.sh'"
  echo "# code for 'git status' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
git_commit_command() {
  # :src/commit_command.sh
  echo "# this file is located in 'src/commit_command.sh'"
  echo "# code for 'git commit' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.parse_args
parse_args() {
  # :command.environment_variables_filter
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    git_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  status | s* )
    action="status"
    shift
    git_status_parse_args "$@"
    shift $#
    ;;    
  
  commit | c* )
    action="commit"
    shift
    git_commit_parse_args "$@"
    shift $#
    ;;    
  
  * )
    git_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      echo -e "invalid argument: $key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_args
git_status_parse_args() {
  # :command.environment_variables_filter
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    git_status_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action="status"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      echo -e "invalid argument: $key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_args
git_commit_parse_args() {
  # :command.environment_variables_filter
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    git_commit_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action="commit"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --message | -m )
      if [[ $2 && $2 != -* ]]; then
        args[--message]="$2"
        shift
        shift
      else
        echo -e "--message requires an argument: --message, -m MESSAGE"
        exit 1
      fi
      ;;
  
    # :flag.case
    --all | -a )
      args[--all]=1
      shift
      ;;
  
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      echo -e "invalid argument: $key"
      exit 1
      ;;
  
    esac
  done
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_args "$@"

  if [[ $action == "status" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      git_status_usage
    else
      git_status_command
    fi
  
  elif [[ $action == "commit" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      git_commit_usage
    else
      git_commit_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    git_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
