#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ftp_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "ftp - Sample application that uses the default command option"
    echo 
  else
    echo -e "ftp - Sample application that uses the default command option"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  ftp [command] [options]"
  echo -e "  ftp [command] --help | -h"
  echo -e "  ftp --version"
  echo
  # :command.usage_commands
  echo -e "Commands:"
  echo "  upload     Upload a file (default)"
  echo "  download   Download a file"
  echo

  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo

  fi
}

# :command.usage
ftp_upload_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "ftp upload - Upload a file"
    echo 
  else
    echo -e "ftp upload - Upload a file"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  ftp upload SOURCE [options]"
  echo -e "  ftp upload --help | -h"
  echo

  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  SOURCE"
    echo -e "    File to upload"
    echo

  fi
}

# :command.usage
ftp_download_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "ftp download - Download a file"
    echo 
  else
    echo -e "ftp download - Download a file"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  ftp download SOURCE [options]"
  echo -e "  ftp download --help | -h"
  echo

  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  SOURCE"
    echo -e "    File to download"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.command_functions
# :command.function
ftp_upload_command() {
  # :src/upload_command.sh
  echo "# this file is located in 'src/upload_command.sh'"
  echo "# code for 'ftp upload' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
ftp_download_command() {
  # :src/download_command.sh
  echo "# this file is located in 'src/download_command.sh'"
  echo "# code for 'ftp download' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    ftp_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  upload | u )
    action="upload"
    shift
    ftp_upload_parse_requirements "$@"
    shift $#
    ;;    
  
  download | d )
    action="download"
    shift
    ftp_download_parse_requirements "$@"
    shift $#
    ;;    
  
  "" )
    ftp_usage
    exit 1
    ;;
  
  * )
    action="upload"
    ftp_upload_parse_requirements "$@"
    shift $#
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      echo -e "invalid argument: $key"
      exit 1
      ;;
  
    esac
  done
}

# :command.parse_requirements
ftp_upload_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    ftp_upload_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="upload"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    echo -e "missing required argument: SOURCE\nusage: ftp upload SOURCE [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.parse_requirements
ftp_download_parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    ftp_download_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="download"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    echo -e "missing required argument: SOURCE\nusage: ftp download SOURCE [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ $action == "upload" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      ftp_upload_usage
    else
      ftp_upload_command
    fi
  
  elif [[ $action == "download" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      ftp_download_usage
    else
      ftp_download_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    ftp_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
