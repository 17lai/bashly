#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended


# :command.version_command
version_command() {
  echo $version
}

# :command.usage
cli_usage() {
  echo "cli - Sample application"
  echo 
  echo "Usage:"
  echo "  cli [command] [options]"
  echo
  # :command.usage_commands
  echo "Commands:"
  echo "  download   Download a file"
  echo "  upload     Upload a file"
  echo

  if [[ -n $long_usage ]]; then
    echo "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo "    Show this help"
    echo
    echo "  --version"
    echo "    Show version number"
    echo



  fi
}

# :command.usage
cli_download_usage() {
  echo "cli download - Download a file"
  echo 
  echo "Usage:"
  echo "  cli download SOURCE [TARGET] [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo "    Show this help"
    echo
    echo "  --version"
    echo "    Show version number"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --force, -f"
    echo "    Overwrite existing files"
    echo
    # :command.usage_args
    echo "Arguments:"
    
    # :argument.usage
    echo "  SOURCE"
    echo "    URL to download from"
    echo
    
    # :argument.usage
    echo "  TARGET"
    echo "    Target filename (default: same as source)"
    echo

  fi
}


# :command.usage
cli_upload_usage() {
  echo "cli upload - Upload a file"
  echo 
  echo "Usage:"
  echo "  cli upload SOURCE [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo "    Show this help"
    echo
    echo "  --version"
    echo "    Show version number"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --user, -u USER (required)"
    echo "    Username to use for logging in"
    echo
    
    # :flag.usage
    echo "  --password, -p PASSWORD"
    echo "    Password to use for logging in"
    echo
    # :command.usage_args
    echo "Arguments:"
    
    # :argument.usage
    echo "  SOURCE"
    echo "    File to upload"
    echo

  fi
}



# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]}" = ${args[$k]}; done
}

# :command.command_functions
# :command.function
cli_download_command() {
  # :src/cli_download_command.sh
  echo "# this file is located in 'src/cli_download_command.sh'"
  echo "# code for 'cli download' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
cli_upload_command() {
  # :src/cli_upload_command.sh
  echo "# this file is located in 'src/cli_upload_command.sh'"
  echo "# code for 'cli upload' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}


# :command.parse_args
parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    cli_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  download | d )
    shift
    download_parse_args "$@"
    shift $#
    ;;    
  
  upload | u )
    shift
    upload_parse_args "$@"
    shift $#
    ;;    
  
  * )
    cli_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo invalid option: $key
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      echo invalid argument: $key
      exit 1
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
download_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    cli_download_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    echo missing required argument: SOURCE
    echo Usage: cli download SOURCE [TARGET] [options]
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --force | -f )
      args[--force]=1
      shift
      ;;
  
  
    -* )
      echo invalid option: $key
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      elif [[ ! ${args[target]} ]]; then
        args[target]=$1
        shift
      else
        echo invalid argument: $key
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
upload_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    cli_upload_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    echo missing required argument: SOURCE
    echo Usage: cli upload SOURCE [options]
    exit 1
  fi
  # :command.required_flags_filter
  if [[ $* != *--user* && $* != *-u* ]]; then
    echo "missing required flag: --user, -u USER"
    exit 1
  fi
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --user | -u )
      if [[ $2 && $2 != -* ]]; then
        args[--user]="$2"
        shift
        shift
      else
        echo --user requires an argument: --user, -u USER
        exit 1
      fi
      ;;
  
    # :flag.case
    --password | -p )
      if [[ $2 && $2 != -* ]]; then
        args[--password]="$2"
        shift
        shift
      else
        echo --password requires an argument: --password, -p PASSWORD
        exit 1
      fi
      ;;
  
  
    -* )
      echo invalid option: $key
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      else
        echo invalid argument: $key
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  
}

# :command.run
run() {
  declare -A args
  parse_args "$@"

  if [[ $action == "download" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_download_usage
    else
      cli_download_command
    fi
  
  elif [[ $action == "upload" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      cli_upload_usage
    else
      cli_upload_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    cli_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
