#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended


# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
configly_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "configly - Sample application that uses the config functions"
    echo 
  else
    echo -e "configly - Sample application that uses the config functions"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  configly [command] [options]"
  echo -e "  configly [command] --help | -h"
  echo -e "  configly --version"
  echo
  # :command.usage_commands
  echo -e "Commands:"
  echo "  set    Save a value in the config file"
  echo "  get    Read a value from the config file"
  echo "  list   Show the entire config file"
  echo

  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo





  fi
}

# :command.usage
configly_set_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "configly set - Save a value in the config file"
    echo 
  else
    echo -e "configly set - Save a value in the config file"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  configly set KEY VALUE [options]"
  echo -e "  configly set --help | -h"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  KEY"
    echo -e "    Config key"
    echo
    
    # :argument.usage
    echo "  VALUE"
    echo -e "    Config value"
    echo

    # :command.usage_examples
    echo -e "Examples:"
    
    echo -e "  configly set hello world"
    echo

  fi
}


# :command.usage
configly_get_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "configly get - Read a value from the config file"
    echo 
  else
    echo -e "configly get - Read a value from the config file"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  configly get KEY [options]"
  echo -e "  configly get --help | -h"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  KEY"
    echo -e "    Config key"
    echo

    # :command.usage_examples
    echo -e "Examples:"
    
    echo -e "  configly set hello"
    echo

  fi
}


# :command.usage
configly_list_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "configly list - Show the entire config file"
    echo 
  else
    echo -e "configly list - Show the entire config file"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  configly list [options]"
  echo -e "  configly list --help | -h"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo





  fi
}



# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.user_lib
# :src/lib/config.sh
# ---
# Config handling functions
# This file is a part of bashly's standard library functions.
#
# Usage:
# - In your script, set the CONFIG_FILE variable. For rxample:
#   CONFIG_FILE=config.ini
# - Use any of the functions below to access the config file.
# ---

# Create a new config file.
# There is normally no need to use this fucntion, it is used by othe rfunctions
# as needed.
config_init() {
  CONFIG_FILE=${CONFIG_FILE:=config.ini}
  [[ -f "$CONFIG_FILE" ]] || touch "$CONFIG_FILE"
}

# Get a value from the config
# Usage: result=$(config_get hello)
config_get() {
  key=$1
  regex="^$key\s*=\s*(.+)$"

  config_init
  
  while IFS= read -r line || [ -n "$line" ]; do
    if [[ $line =~ $regex ]]; then
      value="${BASH_REMATCH[1]}"
      break
    fi
  done < "$CONFIG_FILE"

  echo "$value"
}

# Add or update a key=value pair in the config.
# Usage: config_set key value
config_set() {
  key=$1
  shift
  value="$*"

  config_init

  regex="^($key)\s*=\s*.+$"
  output=""
  found_key=""
  
  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line =~ $regex ]]; then
      found_key="${BASH_REMATCH[1]}"
      newline="$key = $value"
      output="$output$newline\n"
    elif [[ $line ]]; then
      output="$output$line\n"
    fi
  done < "$CONFIG_FILE"

  if [[ -z $found_key ]]; then
    output="$output$key = $value\n"
  fi

  echo -e "$output" > "$CONFIG_FILE"
}

# Delete a key from teh config.
# Usage: config_del key
config_del() {
  key=$1

  regex="^($key)\s*="
  output=""

  config_init

  while IFS= read -r line || [ -n "$line" ]; do
    newline=$line
    if [[ $line ]] && [[ ! $line =~ $regex ]]; then
      output="$output$line\n"
    fi
  done < "$CONFIG_FILE"

  echo -e "$output" > "$CONFIG_FILE"
}

# Show the config file
config_show() {
  config_init
  cat "$CONFIG_FILE"
}



# :command.command_functions
# :command.function
configly_set_command() {
  # :src/set_command.sh
  # Using the standard library (lib/config.sh) to store a value to the config
  config_set "${args[key]}" "${args[value]}"
  echo "saved: ${args[key]} = ${args[value]}"
}

# :command.function
configly_get_command() {
  # :src/get_command.sh
  # Using the standard library (lib/config.sh) to show a value from the config
  config_get "${args[key]}"
  
  # Example of how to assign the config value to a variable:
  # result=$(config_get "${args[key]}")
  # echo $result
}

# :command.function
configly_list_command() {
  # :src/list_command.sh
  # Using the standard library (lib/config.sh) to show the entire config file
  config_show
}


# :command.parse_args
parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    configly_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action=$1
  
  case $action in
  -* )
    ;;
  
  set | s )
    action="set"
    shift
    configly_set_parse_args "$@"
    shift $#
    ;;    
  
  get | g )
    action="get"
    shift
    configly_get_parse_args "$@"
    shift $#
    ;;    
  
  list | l )
    action="list"
    shift
    configly_list_parse_args "$@"
    shift $#
    ;;    
  
  * )
    configly_usage
    exit 1
    ;;
  
  esac
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      echo -e "invalid argument: $key"
      exit 1
      ;;
  
    esac
  done
}


# :command.parse_args_secondary
configly_set_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    configly_set_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action="set"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[key]=$1
    shift
  else
    echo -e "missing required argument: KEY\nusage: configly set KEY VALUE [options]"
    exit 1
  fi
  
  if [[ $1 && $1 != -* ]]; then
    args[value]=$1
    shift
  else
    echo -e "missing required argument: VALUE\nusage: configly set KEY VALUE [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[key]} ]]; then
        args[key]=$1
        shift
      elif [[ ! ${args[value]} ]]; then
        args[value]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}



# :command.parse_args_secondary
configly_get_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    configly_get_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action="get"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[key]=$1
    shift
  else
    echo -e "missing required argument: KEY\nusage: configly get KEY [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[key]} ]]; then
        args[key]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}



# :command.parse_args_secondary
configly_list_parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    configly_list_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action="list"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      echo -e "invalid argument: $key"
      exit 1
      ;;
  
    esac
  done
}



# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_args "$@"

  if [[ $action == "set" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      configly_set_usage
    else
      configly_set_command
    fi
  
  elif [[ $action == "get" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      configly_get_usage
    else
      configly_get_command
    fi
  
  elif [[ $action == "list" ]]; then
    if [[ ${args[--help]} ]]; then
      long_usage=yes
      configly_list_usage
    else
      configly_list_command
    fi
  
  elif [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    configly_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
