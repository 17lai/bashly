#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.root_command
root_command() {
  # :src/root_command.sh
  # Call our custom library function
  echo "Before custom code"
  my_extra_function
  echo "After custom code"
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
download_usage() {
  if [[ -n $long_usage ]]; then
    echo -e "download - Sample minimal application with custom strings"
    echo 
  else
    echo -e "download - Sample minimal application with custom strings"
    echo 
  fi
  echo -e "Usage:"
  echo -e "  download [SOURCE] [options]"
  echo -e "  download --help | -h"
  echo -e "  download --version"
  echo

  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo

    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  SOURCE"
    echo -e "    URL to download from"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}

# :command.user_lib
# :src/lib/my_extra_function.sh
my_extra_function() {
  echo "---"
  echo "This is a place to write custom code that is needed by more than"
  echo "one part of the application."
  echo "Under most circumstances, you will not need it, but it is provided"
  echo "for extra flexibility."
  echo "---"
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version )
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    download_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.command_filter
  action="root"
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  parse_requirements "$@"

  if [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    download_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
