#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.root_command
root_command() {
  # :src/root_command.sh
  echo "# this file is located in 'src/root_command.sh'"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
download_usage() {
  echo -e "download - Sample minimal application without subcommands"
  echo 
  echo -e "Usage:"
  echo -e "  download SOURCE [TARGET] [options]"
  echo


  if [[ -n $long_usage ]]; then
    echo -e "Options:"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    echo -e "    Show this help"
    echo
    echo "  --version"
    echo -e "    Show version number"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --force, -f"
    echo "    Overwrite existing files"
    echo
    # :command.usage_args
    echo -e "Arguments:"
    
    # :argument.usage
    echo "  SOURCE"
    echo "    URL to download from"
    echo
    
    # :argument.usage
    echo "  TARGET"
    echo "    Target filename (default: same as source)"
    echo

    # :command.usage_examples
    echo -e "Examples:"
    echo "  download example.com"
    echo "  download example.com ./output -f"
    echo

  fi
}


# :command.inspect_args
inspect_args() {
  echo args:
  for k in "${!args[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
}


# :command.command_functions

# :command.parse_args
parse_args() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v ) 
    version_command
    exit 1
    ;;
  
  --help | -h ) 
    long_usage=yes
    download_usage
    exit 1
    ;;
  
  esac
  # :command.command_filter
  action=root
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    echo -e "missing required argument: SOURCE\nusage: download SOURCE [TARGET] [options]"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_args_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --force | -f )
      args[--force]=1
      shift
      ;;
  
  
    -* )
      echo -e "invalid option: $key"
      exit 1
      ;;
  
    * )
      # :command.parse_args_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      elif [[ ! ${args[target]} ]]; then
        args[target]=$1
        shift
      else
        echo -e "invalid argument: $key"
        exit 1
      fi
      ;;
  
    esac
  done
}


# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
}

# :command.run
run() {
  declare -A args
  parse_args "$@"

  if [[ ${args[--version]} ]]; then
    version_command
  elif [[ ${args[--help]} ]]; then
    long_usage=yes
    download_usage
  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
